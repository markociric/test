/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forms;

import controller.Controller;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import util.Mesto;
import util.NarucilacUsluge;
import util.Otpremnica;
import util.Roba;
import util.StavkaOtpremnice;
import util.TableModelStavkeOtpremnice;
import util.Vozac;

/**
 *
 * @author Marko
 */
public class UpdateOtpremnicaForm extends javax.swing.JDialog {

    Otpremnica o;
    List<JTextField> textFields = new ArrayList<>();
    private Locale currentLocale;
    private ResourceBundle messages;

    /**
     * Creates new form DetailsOtpremnicaForm
     */
    public UpdateOtpremnicaForm(java.awt.Frame parent, boolean modal, Otpremnica otpremnica, Locale currentLocale) throws IOException {
        super(parent, modal);
        initComponents();
        this.currentLocale = currentLocale;
        loadLanguage();
        updateTexts();
        addListeners();
        o = otpremnica;
        fillcombo();
        switch (currentLocale.getLanguage()) {
            case "sr":
                lblTitle.setText("Otpremnica broj : " + otpremnica.getIdOtpremnica());
                lblDateOtpremnica.setText("Kreirana dana : " + Controller.getInstance().convertDate(otpremnica.getDatum()));
                break;
            case "sr_cir":
                lblTitle.setText("Отпремница број : " + otpremnica.getIdOtpremnica());
                lblDateOtpremnica.setText("Креирана дана : " + Controller.getInstance().convertDate(otpremnica.getDatum()));
                break;
            default:
                lblTitle.setText("Delivery note number : " + otpremnica.getIdOtpremnica());
                lblDateOtpremnica.setText("Date created : " + Controller.getInstance().convertDate(otpremnica.getDatum()));
                break;
        }

        txtAdressNU.setText(otpremnica.getNarucilacUsluge().getAdress());
        txtMailNU.setText(otpremnica.getNarucilacUsluge().getEmail());
        txtLastNameNU.setText(otpremnica.getNarucilacUsluge().getLastName());
        txtNameNU.setText(otpremnica.getNarucilacUsluge().getName());
        txtPhoneNU.setText(otpremnica.getNarucilacUsluge().getPhone());
        txtMailV.setEditable(false);
        txtPhoneV.setEditable(false);
        txtDriverType.setEditable(false);
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNU = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtLastNameNU = new javax.swing.JTextField();
        lblAdress = new javax.swing.JLabel();
        txtAdressNU = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtPhoneNU = new javax.swing.JTextField();
        lblMail = new javax.swing.JLabel();
        txtMailNU = new javax.swing.JTextField();
        lblPlace = new javax.swing.JLabel();
        txtMailV = new javax.swing.JTextField();
        lblDriverType = new javax.swing.JLabel();
        lblDriver = new javax.swing.JLabel();
        txtDriverType = new javax.swing.JTextField();
        lblNameLastName = new javax.swing.JLabel();
        lblPhone2 = new javax.swing.JLabel();
        txtPhoneV = new javax.swing.JTextField();
        lblMail2 = new javax.swing.JLabel();
        lblDateOtpremnica = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblOtpremnicaItems = new javax.swing.JLabel();
        comboVozac = new javax.swing.JComboBox<>();
        comboMesto = new javax.swing.JComboBox<>();
        txtNameNU = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        lblErrorName = new javax.swing.JLabel();
        lblErrorLastName = new javax.swing.JLabel();
        lblErrorPhone = new javax.swing.JLabel();
        lblErrorMail = new javax.swing.JLabel();
        btnDeleteItem = new javax.swing.JButton();
        comboRoba = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        lblChangeItem = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        txtQtyStavka = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblNU.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblNU.setText("Naručilac usluge");

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitle.setText("Naslov");

        lblName.setText("Ime");

        lblAdress.setText("Adresa");

        lblPhone.setText("Telefon");

        lblMail.setText("Email");

        lblPlace.setText("Mesto i poštanski broj");

        lblDriverType.setText("Vrsta prevoznog sredstva");

        lblDriver.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDriver.setText("Vozač");

        lblNameLastName.setText("Ime i Prezime");

        lblPhone2.setText("Telefon");

        lblMail2.setText("Email");

        lblDateOtpremnica.setText("datum");

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        lblOtpremnicaItems.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblOtpremnicaItems.setText("Stavke Otpremnice");

        comboVozac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVozacActionPerformed(evt);
            }
        });

        lblLastName.setText("Prezime");

        lblErrorName.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorName.setText("jLabel14");

        lblErrorLastName.setForeground(new java.awt.Color(255, 0, 51));
        lblErrorLastName.setText("jLabel14");

        lblErrorPhone.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorPhone.setText("jLabel14");

        lblErrorMail.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorMail.setText("jLabel14");

        btnDeleteItem.setText("Izbriši stavku");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnAdd.setText("Unesi");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblChangeItem.setText("Izaberi stavku");

        lblQty.setText("Unesi količinu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(lblDateOtpremnica, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNU)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(lblLastName)
                                .addGap(18, 18, 18)
                                .addComponent(txtLastNameNU, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorName, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblAdress)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtAdressNU, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblName)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtNameNU, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPhone)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtPhoneNU, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPlace)
                                            .addGap(18, 18, 18)
                                            .addComponent(comboMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblMail)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtMailNU, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(lblOtpremnicaItems)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteItem)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lblErrorMail, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblErrorPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(lblDriver))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblPhone2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtPhoneV, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblMail2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtMailV, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblNameLastName)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboVozac, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblDriverType)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtDriverType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblChangeItem)
                                    .addComponent(lblQty))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboRoba, 0, 179, Short.MAX_VALUE)
                                    .addComponent(txtQtyStavka))
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(95, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(490, 490, 490)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(36, 36, 36)
                        .addComponent(lblNU)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtNameNU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastNameNU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorLastName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAdressNU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAdress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPhone)
                            .addComponent(txtPhoneNU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDateOtpremnica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDriver)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNameLastName)
                            .addComponent(comboVozac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPhone2)
                            .addComponent(txtPhoneV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMailV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMail2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDriverType)
                            .addComponent(txtDriverType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorPhone))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMailNU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMail)
                    .addComponent(lblErrorMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPlace)
                    .addComponent(comboMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboRoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChangeItem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQty)
                            .addComponent(txtQtyStavka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteItem)
                            .addComponent(lblOtpremnicaItems))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnSave)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Vozac selectedVozac = (Vozac) comboVozac.getSelectedItem();
        Mesto selectedMesto = (Mesto) comboMesto.getSelectedItem();

        String name = txtNameNU.getText();
        String lastName = txtLastNameNU.getText();
        String phone = txtPhoneNU.getText();
        String mail = txtMailNU.getText();
        String adress = txtAdressNU.getText();

        if (lblErrorName.getText().equals("")
                && lblErrorLastName.getText().equals("")
                && lblErrorMail.getText().equals("")
                && lblErrorPhone.getText().equals("")) {
            try {
                NarucilacUsluge param2 = new NarucilacUsluge(o.getNarucilacUsluge().getIdNarucilacUsluge(), name, lastName, adress, phone, mail, selectedMesto);
                Controller.getInstance().updateNarucilacUsluge(param2);
                Otpremnica param = new Otpremnica(o.getIdOtpremnica(), null, selectedVozac, o.getNarucilacUsluge());
                boolean result = Controller.getInstance().updateOtpremnica(param);
                if (result) {
                    switch (currentLocale.getLanguage()) {
                        case "sr" ->
                            JOptionPane.showMessageDialog(this, "Uspešno sačuvane izmene", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);

                        case "sr_cir" ->
                            JOptionPane.showMessageDialog(this, "Успешно сачуване промене", "Обавештење", JOptionPane.INFORMATION_MESSAGE);

                        default ->
                            JOptionPane.showMessageDialog(this, "Changes saved successfully", "Notification", JOptionPane.INFORMATION_MESSAGE);

                    }
                    this.dispose();
                }
            } catch (IOException ex) {
                Logger.getLogger(UpdateOtpremnicaForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            switch (currentLocale.getLanguage()) {
                case "sr" ->
                    JOptionPane.showMessageDialog(this, "Niste ispravno popunili sve podatke", "Greška", JOptionPane.ERROR_MESSAGE);
                case "sr_cir" ->
                    JOptionPane.showMessageDialog(this, "Нисте правилнно попунили све податке", "Грешка", JOptionPane.ERROR_MESSAGE);
                default ->
                    JOptionPane.showMessageDialog(this, "You have not filled in all the information correctly", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void comboVozacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVozacActionPerformed
        try {
            Vozac selected = (Vozac) comboVozac.getSelectedItem();
            txtMailV.setText(selected.getEmail());
            List<String> vehicles = Controller.getInstance().getVehicles(selected.getIdVozac());
            String v = "";
            for (String vehicle : vehicles) {
                v = v + " " + vehicle;
            }
            txtDriverType.setText(v);
            txtPhoneV.setText(selected.getPhoneNumber());
        } catch (IOException ex) {
            Logger.getLogger(UpdateOtpremnicaForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboVozacActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Roba selected = (Roba) comboRoba.getSelectedItem();
        boolean result = true;
        try {
            double qty = Double.parseDouble(txtQtyStavka.getText());
            List<StavkaOtpremnice> list = Controller.getInstance().getListStavkeOtpremnice(o.getIdOtpremnica());
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getIdRoba().getIdRoba() == selected.getIdRoba()) {
                    if (list.get(i).getIdRoba().getQty() < qty) {
                        switch (currentLocale.getLanguage()) {
                            case "sr" ->
                                JOptionPane.showMessageDialog(this, "Na stanju nema ta količina robe", "Greška", JOptionPane.ERROR_MESSAGE);
                            case "sr_cir" ->
                                JOptionPane.showMessageDialog(this, "На стању нема та количина робе", "Грешка", JOptionPane.ERROR_MESSAGE);
                            default ->
                                JOptionPane.showMessageDialog(this, "That quantity of goods is not available", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        
                        return;
                    }
                    if (list.get(i).getQty() + qty <= 0) {
                        switch (currentLocale.getLanguage()) {
                            case "sr" ->
                                JOptionPane.showMessageDialog(this, "Ne možete oduzeti više robe nego što je upisano. Ako želite, bolje obrišite tu stavku", "Greška", JOptionPane.ERROR_MESSAGE);
                            case "sr_cir" ->
                                JOptionPane.showMessageDialog(this, "Не можете одузети више робе него што је уписано. Ако желите,боље обришите ту ставку", "Грешка", JOptionPane.ERROR_MESSAGE);
                            default ->
                                JOptionPane.showMessageDialog(this, "You cannot take away more goods than is registered. If you want, you better delete that item", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        
                        return;
                    } else {
                        System.out.println(list.get(i).getQty());

                        Roba param = new Roba(list.get(i).getIdRoba().getIdRoba(), null, (list.get(i).getIdRoba().getQty() - qty), null, -1);
                        Controller.getInstance().updateRoba(param);
                        StavkaOtpremnice param2 = new StavkaOtpremnice(list.get(i).getIdOtpremnica(), -1, list.get(i).getIdRoba(), Double.sum(list.get(i).getQty(), qty));
                        Controller.getInstance().updateQtySO(param2);
                        switch (currentLocale.getLanguage()) {
                            case "sr" ->
                                JOptionPane.showMessageDialog(this, "Uspešno izmenjena količina robe", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                            case "sr_cir" ->
                                JOptionPane.showMessageDialog(this, "Успешно измењена количина робе", "Обавештење", JOptionPane.INFORMATION_MESSAGE);
                            default ->
                                JOptionPane.showMessageDialog(this, "Successfully changed the quantity of goods", "Notification", JOptionPane.INFORMATION_MESSAGE);
                        }
                        
                        result = false;
                        fillTable();

                    }
                }
            }
            if (result) {
                if (qty >= 0) { //treba da dodam logiku ako dodajem neku robu koja nije na listi stavki, 
//                    //da proverim da li u skladistu ima dovoljno te nove robe koje zelim da dodam kao stavku otpremnice
                    List<Roba> listRoba = Controller.getInstance().getListRoba();
                    for (int i = 0; i < listRoba.size(); i++) {
                        if (listRoba.get(i).getIdRoba() == selected.getIdRoba()) {
                            if (listRoba.get(i).getQty() >= qty) {
                                StavkaOtpremnice param = new StavkaOtpremnice(o.getIdOtpremnica(), -1, selected, qty);
                                int id = Controller.getInstance().insertStavkaOtpremnice(param);
                                Roba param2 = new Roba(selected.getIdRoba(), null, listRoba.get(i).getQty() - qty, null, -1);
                                Controller.getInstance().updateRoba(param2);
                                switch (currentLocale.getLanguage()) {
                                    case "sr" ->
                                        JOptionPane.showMessageDialog(this, "Uspešno dodata nova stavka", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                                    case "sr_cir" ->
                                        JOptionPane.showMessageDialog(this, "Успешно додата нова ставка", "Обавештење", JOptionPane.INFORMATION_MESSAGE);
                                    default ->
                                        JOptionPane.showMessageDialog(this, "New item successfully added", "Notification", JOptionPane.INFORMATION_MESSAGE);
                                }
                                
                                fillTable();
                            } else {
                                switch (currentLocale.getLanguage()) {
                                    case "sr" ->
                                        JOptionPane.showMessageDialog(this, "Nema dovoljno tražene robe u skladištu", "Greška", JOptionPane.ERROR_MESSAGE);
                                    case "sr_cir" ->
                                        JOptionPane.showMessageDialog(this, "Нема довољно тражене робе на складишту", "Грешка", JOptionPane.ERROR_MESSAGE);
                                    default ->
                                        JOptionPane.showMessageDialog(this, "There are not enough requested goods in the warehouse", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                                
                            }
                        }
                    }
                } else {
                    switch (currentLocale.getLanguage()) {
                        case "sr" ->
                            JOptionPane.showMessageDialog(this, "Neispravan unos količine robe", "Greška", JOptionPane.ERROR_MESSAGE);
                        case "sr_cir" ->
                            JOptionPane.showMessageDialog(this, "Неисправан унос количине робе", "Грешка", JOptionPane.ERROR_MESSAGE);
                        default ->
                            JOptionPane.showMessageDialog(this, "Incorrect entry of the quantity of goods", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
            }
        } catch (Exception e) {
            switch (currentLocale.getLanguage()) {
                case "sr" ->
                    JOptionPane.showMessageDialog(this, "Neispravan unos količine robe, niste uneli broj", "Greška!", JOptionPane.ERROR_MESSAGE);
                case "sr_cir" ->
                    JOptionPane.showMessageDialog(this, "Неисправан унос количине робе, нисте унели број", "Грешка!", JOptionPane.ERROR_MESSAGE);
                default ->
                    JOptionPane.showMessageDialog(this, "Incorrect entry of the quantity of goods, you did not enter a number", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        try {
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow == -1) {
                switch (currentLocale.getLanguage()) {
                    case "sr" ->
                        JOptionPane.showMessageDialog(this, "Morate da izaberete neko polje", "Greška!", JOptionPane.ERROR_MESSAGE);
                    case "sr_cir" ->
                        JOptionPane.showMessageDialog(this, "Морате да изаберете неко поље", "Грешка!", JOptionPane.ERROR_MESSAGE);
                    default ->
                        JOptionPane.showMessageDialog(this, "You must select a field", "Error!", JOptionPane.ERROR_MESSAGE);
                }
                return;
            }
            List<StavkaOtpremnice> list = Controller.getInstance().getListStavkeOtpremnice(o.getIdOtpremnica());
            int delete = list.get(selectedRow).getId();
            boolean result = Controller.getInstance().deleteStavkaOtpremnice(delete);

            if (result) {
                switch (currentLocale.getLanguage()) {
                    case "sr" ->
                        JOptionPane.showMessageDialog(this, "Uspešno izbrisana vrsta vozača");
                    case "sr_cir" ->
                        JOptionPane.showMessageDialog(this, "Успешно избрисана врста возача");
                    default ->
                        JOptionPane.showMessageDialog(this, "Successfully deleted driver type");
                }
                

            } else {
                switch (currentLocale.getLanguage()) {
                    case "sr" ->
                        JOptionPane.showMessageDialog(this, "Greška pri brisanju iz baze", "Greška!", JOptionPane.ERROR_MESSAGE);
                    case "sr_cir" ->
                        JOptionPane.showMessageDialog(this, "Грешка при брисању из базе", "Грешка!", JOptionPane.ERROR_MESSAGE);
                    default ->
                        JOptionPane.showMessageDialog(this, "Error deleting from database", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            fillTable();
        } catch (IOException ex) {
            Logger.getLogger(UpdateOtpremnicaForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnDeleteItemActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<Mesto> comboMesto;
    private javax.swing.JComboBox<Roba> comboRoba;
    private javax.swing.JComboBox<Vozac> comboVozac;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAdress;
    private javax.swing.JLabel lblChangeItem;
    private javax.swing.JLabel lblDateOtpremnica;
    private javax.swing.JLabel lblDriver;
    private javax.swing.JLabel lblDriverType;
    private javax.swing.JLabel lblErrorLastName;
    private javax.swing.JLabel lblErrorMail;
    private javax.swing.JLabel lblErrorName;
    private javax.swing.JLabel lblErrorPhone;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMail;
    private javax.swing.JLabel lblMail2;
    private javax.swing.JLabel lblNU;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameLastName;
    private javax.swing.JLabel lblOtpremnicaItems;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPhone2;
    private javax.swing.JLabel lblPlace;
    private javax.swing.JLabel lblQty;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAdressNU;
    private javax.swing.JTextField txtDriverType;
    private javax.swing.JTextField txtLastNameNU;
    private javax.swing.JTextField txtMailNU;
    private javax.swing.JTextField txtMailV;
    private javax.swing.JTextField txtNameNU;
    private javax.swing.JTextField txtPhoneNU;
    private javax.swing.JTextField txtPhoneV;
    private javax.swing.JTextField txtQtyStavka;
    // End of variables declaration//GEN-END:variables

    private void fillTable() throws IOException {
        TableModelStavkeOtpremnice modelStavkeOtpremnice = new TableModelStavkeOtpremnice(Controller.getInstance().getListStavkeOtpremnice(o.getIdOtpremnica()));
        jTable1.setModel(modelStavkeOtpremnice);
    }

    private void fillcombo() throws IOException {
        List<Vozac> list = Controller.getInstance().getListVozac();
        for (Vozac vozac : list) {
            comboVozac.addItem(vozac);
            if (o.getVozac().getIdVozac() == vozac.getIdVozac()) {
                comboVozac.setSelectedItem(vozac);
            }

        }

        List<Mesto> lista = Controller.getInstance().getListMesto();
        for (Mesto mesto : lista) {
            comboMesto.addItem(mesto);
            if (o.getNarucilacUsluge().getMesto().getIdMesto() == mesto.getIdMesto()) {
                comboMesto.setSelectedItem(mesto);
            }

        }

        List<Roba> listaR = Controller.getInstance().getListRoba();
        for (Roba roba : listaR) {
            comboRoba.addItem(roba);

        }
    }

    private void checkFields() {
        boolean allFilled = Controller.validateTextFields(textFields);
        btnSave.setEnabled(allFilled);
    }

    private void addListeners() throws IOException {

        textFields.add(txtLastNameNU);
        textFields.add(txtNameNU);
        textFields.add(txtMailNU);
        textFields.add(txtPhoneNU);
        textFields.add(txtAdressNU);

        for (JTextField textField : textFields) {
            textField.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    checkFields();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    checkFields();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    checkFields();
                }
            });
        }
        Controller.getInstance().checkPhone(txtPhoneNU, lblErrorPhone, currentLocale);
        Controller.getInstance().checkMail(txtMailNU, lblErrorMail, currentLocale);

        switch (currentLocale.getLanguage()) {
            case "sr":
                Controller.getInstance().checkName(txtNameNU, lblErrorName, "Loš unos imena.");
                Controller.getInstance().checkName(txtLastNameNU, lblErrorLastName, "Loš unos prezimena.");
                break;
            case "sr_cir":
                Controller.getInstance().checkName(txtNameNU, lblErrorName, "Лош унос имена.");
                Controller.getInstance().checkName(txtLastNameNU, lblErrorLastName, "Лош унос презимена.");
                break;
            default:
                Controller.getInstance().checkName(txtNameNU, lblErrorName, "Bad name input.");
                Controller.getInstance().checkName(txtLastNameNU, lblErrorLastName, "Bad lastname input.");
                break;

        }
    }

    public void loadLanguage() {
        try {
            messages = ResourceBundle.getBundle("translate.messages", currentLocale);
        } catch (Exception e) {
            System.err.println("Greška pri učitavanju jezika: " + e.getMessage());
        }
    }

    public void updateTexts() {

        lblLastName.setText(messages.getString("lblLastName.text"));
        lblMail.setText(messages.getString("lblMail.text"));
        lblName.setText(messages.getString("lblName.text"));
        lblPhone.setText(messages.getString("lblPhone.text"));
        lblAdress.setText(messages.getString("lblAdress.text"));
        lblPlace.setText(messages.getString("lblPlace.text"));
        lblDriver.setText(messages.getString("lblDriver.text"));
        lblDriverType.setText(messages.getString("lblDriverType.text"));
        lblPhone2.setText(messages.getString("lblPhone2.text"));
        lblMail2.setText(messages.getString("lblMail2.text"));
        btnAdd.setText(messages.getString("btnAdd.text"));
        btnDeleteItem.setText(messages.getString("btnDeleteItem.text"));
        btnSave.setText(messages.getString("btnSave.text"));
        lblOtpremnicaItems.setText(messages.getString("lblOtpremnicaItems.text"));
        lblChangeItem.setText(messages.getString("lblChangeItem.text"));
        lblQty.setText(messages.getString("lblQty.text"));
        lblNU.setText(messages.getString("lblNU.text"));
        lblNameLastName.setText(messages.getString("lblNameLastNameF.text"));

    }
}
